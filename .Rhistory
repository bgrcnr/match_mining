#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
train2
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
sapply(train2,class)
train2
cbind(names(train_features), c(1:ncol(train_features)))
#Seperate Results and Data, remove matchID, MatchDate and LeagueID columns
trainclass <- train_features$Match_Result
traindata <- train_features[,c(3:5,7,24:35,36,52,68,88,104,120)]
testclass <- test_features$Match_Result
testdata <- test_features[,c(3:5,7,24:35,36,52,68,88,104,120)]
#Results as numeric values
trainclass <- (trainclass == "Home")*1 + (trainclass == "Away")*2
testclass <- (testclass == "Home")*1 + (testclass == "Away")*2
#Matrix of Results to be used as an input to the RPS function
results <- matrix(1:(length(testclass)*3), 3)
results[1,] <- (testclass == 1)*1
results[2,] <- (testclass == 0)*1
results[3,] <- (testclass == 2)*1
names(traindata)
#choose which features to be used as inputs to the model
cols <- names(traindata)
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(4:15)]
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cbind(names(traindata), c(1:ncol(traindata)))
cols <- names(traindata)
cols <- cols[c(5:15)]
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(5:15)]
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(5:15, 17:22)]
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cols <- cols[c(5:15, 20:22)]
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cols <- cols[c(5:15)]
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mea
rps1 <- mean(rps1mat)
rps1
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(5,8:18)]
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix fun
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
wt <- c(5,  5,  4,  1)/15
x <- c(3.7,3.3,3.5,2.8)
xm <- weighted.mean(x, wt)
xm
wt*x
sum(wt*x)
sum(1:17)
a <- 1:13
a
days <- (1:avg_days)/sum(1:avg_days)
days
avg_days
