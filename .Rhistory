rps2
output <- rbind(output, data.table(replication = i, accuracy1 = acuracy_knn, accuracy2 = accuracy_knn_kodama, accuracy3 = accuracy_multinom, rps1 = rps1, rps2 = rps2))
output
output <- data.table()
for(i in 1:length(names(traindata)))
{
cols <- names(traindata)
cols <- cols[c(i:length(names(traindata)))]
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- scale(train1)
test1 <- scale(test1)
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
acuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(predicted_scores, t(results))
rps2 <- mean(rps2mat)
rps2
output <- rbind(output, data.table(replication = i, accuracy1 = acuracy_knn, accuracy2 = accuracy_knn_kodama, accuracy3 = accuracy_multinom, rps1 = rps1, rps2 = rps2))
}
output
write.csv(output)
cbind(names(traindata), c(1:ncol(traindata)))
write.csv(cbind(names(traindata), c(1:ncol(traindata))))
cols <- names(traindata)
cols <- cols[c(13:length(names(traindata)))]
cols <- names(traindata)
cols <- cols[c(i:length(names(traindata)))]
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- scale(train1)
test1 <- scale(test1)
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
acuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(predicted_scores, t(results))
rps2 <- mean(rps2mat)
rps2
train1
cols <- names(traindata)
cols <- cols[c(13:length(names(traindata)))]
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- scale(train1)
test1 <- scale(test1)
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
acuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(predicted_scores, t(results))
rps2 <- mean(rps2mat)
rps2
output <- rbind(output, data.table(replication = i, accuracy1 = acuracy_knn, accuracy2 = accuracy_knn_kodama, accuracy3 = accuracy_multinom, rps1 = rps1, rps2 = rps2))
output
cols <- names(traindata)
cols <- cols[c(13:length(names(traindata)))]
cols
# divide data based on the provided dates
train_features=features[Match_Date>=trainStart & Match_Date<testStart]
test_features=features[Match_Date>=testStart]
#keep complete cases
train_features <- train_features[complete.cases(train_features)]
#Seperate Results and Data, remove matchID, MatchDate and LeagueID columns
trainclass <- train_features$Match_Result
traindata <- train_features[,c(7:8,29:51,52,61,70,81,90,99)]
testclass <- test_features$Match_Result
testdata <- test_features[,c(7:8,29:51,52,61,70,81,90,99)]
#Results as numeric values
trainclass <- (trainclass == "Home")*1 + (trainclass == "Away")*2
testclass <- (testclass == "Home")*1 + (testclass == "Away")*2
#Matrix of Results to be used as an input to the RPS function
results <- matrix(1:(length(testclass)*3), 3)
results[1,] <- (testclass == 0)*1
results[2,] <- (testclass == 1)*1
results[3,] <- (testclass == 2)*1
cols <- cols[c(13:length(names(traindata)))]
cols <- names(traindata)
cols <- cols[c(13:length(names(traindata)))]
cols
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(predicted_scores, t(results))
rps2 <- mean(rps2mat)
rps2
predicted_scores
testclass
testdata
test_features
k <- merge(test_features[,c(1)], matches[,c("matchId", "Home", "Away")])
k
test_features
cbind(k, predicted_scores)
write.csv(cbind(k, predicted_scores))
test_features
k <- merge(test_features[,c("matchId","Match_Result")], matches[,c("matchId", "Home", "Away")])
k
cbind(k, predicted_scores)
test_features
matches
k <- merge(test_features[,c("matchId","Match_Result", "Match_Date")], matches[,c("matchId", "Home", "Away")])
k
l <- cbind(k, predicted_scores)
l <- l[order(Date)]
l <- l[order(Match_Date)]
l
write.csv(l)
test_features
k <- merge(test_features[,c("matchId","Match_Result", "Match_Date", "Odd_Close_odd1_bwin", "Odd_Close_odd2_bwin", "Odd_Close_oddX_bwin")], matches[,c("matchId", "Home", "Away")])
l <- cbind(k, predicted_scores)
l <- l[order(Match_Date)]
write.csv(l)
#train and test dates
testStart=as.Date('2018-08-16')
# extract open and close odd type features from multiple bookmakers
features=extract_features.openclose(matches,odd_details,pMissThreshold=rem_miss_threshold,trainStart,testStart)
# divide data based on the provided dates
train_features=features[Match_Date>=trainStart & Match_Date<testStart]
test_features=features[Match_Date>=testStart]
#keep complete cases
train_features <- train_features[complete.cases(train_features)]
cbind(names(train_features), c(1:ncol(train_features)))
#Seperate Results and Data, remove matchID, MatchDate and LeagueID columns
trainclass <- train_features$Match_Result
traindata <- train_features[,c(7:8,29:51,52,61,70,81,90,99)]
testclass <- test_features$Match_Result
testdata <- test_features[,c(7:8,29:51,52,61,70,81,90,99)]
#Results as numeric values
trainclass <- (trainclass == "Home")*1 + (trainclass == "Away")*2
testclass <- (testclass == "Home")*1 + (testclass == "Away")*2
#Matrix of Results to be used as an input to the RPS function
results <- matrix(1:(length(testclass)*3), 3)
results[1,] <- (testclass == 0)*1
results[2,] <- (testclass == 1)*1
results[3,] <- (testclass == 2)*1
cols <- cols[c(13:length(names(traindata)))]
cols <- names(traindata)
cols <- cols[c(13:length(names(traindata)))]
cols
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- scale(train1)
test1 <- scale(test1)
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
acuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob),t(results))
rps1 <- mean(rps1mat)
rps1
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(predicted_scores, t(results))
rps2 <- mean(rps2mat)
rps2
test_features
k <- merge(test_features[,c("matchId","Match_Result", "Match_Date", "Odd_Close_odd1_bwin", "Odd_Close_odd2_bwin", "Odd_Close_oddX_bwin")], matches[,c("matchId", "Home", "Away")])
l <- cbind(k, predicted_scores)
l <- l[order(Match_Date)]
write.csv(l)
cols <- names(traindata)
cols
cols <- cols[c(13:25)]
cols
test_features <- test_features[complete.cases(test_features)]
#Seperate Results and Data, remove matchID, MatchDate and LeagueID columns
trainclass <- train_features$Match_Result
traindata <- train_features[,c(7:8,29:51,52,61,70,81,90,99)]
testclass <- test_features$Match_Result
testdata <- test_features[,c(7:8,29:51,52,61,70,81,90,99)]
#Results as numeric values
trainclass <- (trainclass == "Home")*1 + (trainclass == "Away")*2
testclass <- (testclass == "Home")*1 + (testclass == "Away")*2
#Matrix of Results to be used as an input to the RPS function
results <- matrix(1:(length(testclass)*3), 3)
results[1,] <- (testclass == 0)*1
results[2,] <- (testclass == 1)*1
results[3,] <- (testclass == 2)*1
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- scale(train1)
test1 <- scale(test1)
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
acuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob),t(results))
rps1 <- mean(rps1mat)
rps1
acuracy_knn
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(predicted_scores, t(results))
rps2 <- mean(rps2mat)
rps2
#Inputs
train4 <- traindata[,..cols]
test4 <- testdata[,..cols]
#Bagging Model requires results to be in input data
train4$Match_Result <- as.factor(trainclass)
test4$Match_Result <- as.factor(testclass)
#Model is generated
match.bagging <- bagging(Match_Result ~ ., data = train4, boos = TRUE, mfinal = 10, control = (minsplit = 0))
#Predictions are made
match.predbegging <- predict.bagging(match.bagging, newdata = test4)
#Probabilities for each class
boosting_probs <- t(match.predbegging$prob)
# Average RPS and RPS Matrix
rps4mat <- RPS_matrix(t(boosting_probs),t(results))
rps4 <- mean(rps4mat)
rps4
cols
cols <- names(traindata)
cols <- cols[c(13:24)]
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- scale(train1)
test1 <- scale(test1)
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
acuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob),t(results))
rps1 <- mean(rps1mat)
rps1
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(predicted_scores, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cols
cols <- cols[c(13:24, 29:31)]
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- scale(train1)
test1 <- scale(test1)
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
acuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
tinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(predicted_scores, t(results))
rps2 <- mean(rps2mat)
rps2
