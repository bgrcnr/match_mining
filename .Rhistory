#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
sub <- cbind(prob_rearranged, test_features$matchId, test_features$Unix_Date,test_features$Match_Result)
sub <- as.data.table(sub)
sub <- sub[order(V5)]
sub[158:180,]
sub
sub[150:180,]
matches
matches[order(Match_Date)]
elo <- as.data.table(read.csv("elo_data.csv"))
elo
elo[X:=NULL]
elo[,X:=NULL]
elo
elo_teams <- unique(elo$Club)
elo_teams
elo_teams <- rep(elo_teams, each = 3)
elo_teams
dates <- rep(c("2019-01-01","2019-01-02","2019-01-03"), 35)
dates
elo_new <- cbind(elo_teams, dates)
elo_new
elo_teams
elo_teams <- as.character(rep(elo_teams, each = 3))
elo_teams
elo_teams <- unique(elo$Club)
elo_teams <- as.character(rep(elo_teams, each = 3))
elo_new <- cbind(elo_teams, dates)
elo_new
elo
elo$Club <- as.character(elo$Club)
elo
dates <- as.Date(rep(c("2019-01-01","2019-01-02","2019-01-03"), 35))
dates
elo_new <- cbind(elo_teams, dates)
elo_new
dates <- (rep(c("2019-01-01","2019-01-02","2019-01-03"), 35))
elo_new <- cbind(elo_teams, dates)
elo_new
require(data.table)
require(anytime)
require(scatterplot3d)
require(FNN)
require(glmnet)
require(TunePareto)
require(data.table)
require(RANN.L1)
require(lubridate)
require(devtools)
require(nnet)
library(adabag)
require(pracma)
require(gbm)
require(xgboost)
require(e1071)
require(Ckmeans.1d.dp)
source('data_preprocessing.r')
source('feature_extraction.r')
source('performance_metrics.r')
source('train_models.r')
### match_processing is for adding average goals, average scores and days before the match
source('match_processing.r')
#save paths
matches_data_path = "Files/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds"
odd_details_data_path = "Files/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds"
#train and test dates
testStart=as.Date('2018-03-16')
trainStart=as.Date('2011-09-15')
rem_miss_threshold=0.01 #parameter for removing bookmaker odds with missing ratio greater than this threshold
# read data
city_distances <- read.csv("city_distances.csv")
s_2018 <- as.data.table(read.csv("Files/2018_data.csv"))
s_2017 <- as.data.table(read.csv("Files/2017_data.csv"))
s_2016 <- as.data.table(read.csv("Files/2016_data.csv"))
s_2015 <- as.data.table(read.csv("Files/2015_data.csv"))
s_2014 <- as.data.table(read.csv("Files/2014_data.csv"))
s_2013 <- as.data.table(read.csv("Files/2013_data.csv"))
s_2012 <- as.data.table(read.csv("Files/2012_data.csv"))
s_2011 <- as.data.table(read.csv("Files/2011_data.csv"))
s_2010 <- as.data.table(read.csv("Files/2010_data.csv"))
matches_raw=readRDS(matches_data_path)
odd_details_raw=readRDS(odd_details_data_path)
# preprocess matches
#matched datapreprocessing function is edited, it adds unixdate and weekday columns
matches=matches_data_preprocessing(matches_raw)
additional_data <- rbind(s_2010[,1:23],s_2011[,1:23],s_2012[,1:23],s_2013[,1:23],s_2014[,1:23]
,s_2015[,1:23],s_2016[,1:23],s_2017[,1:23],s_2018[,1:23])
additional_data$HomeTeam <- as.character(additional_data$HomeTeam)
additional_data$AwayTeam <- as.character(additional_data$AwayTeam)
additional_data$Date <- dmy(additional_data$Date)
additional_data <- additional_data[complete.cases(additional_data)]
names1 <- sort(unique(additional_data$HomeTeam))
names2 <- sort(unique(matches$Home))
names3 <- cbind(names1,names2)
for(i in 1:nrow(names3))
{
additional_data[HomeTeam == names3[i,1]]$HomeTeam <- names3[i,2]
additional_data[AwayTeam == names3[i,1]]$AwayTeam <- names3[i,2]
}
additional_data <- additional_data[,Div:=NULL]
col_names <- c("Date", "Home", "Away", "Full Time Home Team Goals",
"Full Time Away Team Goals", "Full Time Result" ,"Half Time Home Team Goals",
"Half Time Away Team Goals", "Half Time Result", "Referee", "Home Team Shots",
"Away Team Shots", "Home Team Shots on Target", "Away Team Shots on Target",
"Home Team Fouls Committed", "Away Team Fouls Committed", "Home Team Corners",
"Away Team Corners", "Home Team Yellow Cards", "Away Team Yellow Cards",
"Home Team Red Cards", "Away Team Red Cards")
colnames(additional_data) <- col_names
comp_data <- merge(matches, additional_data, by.x = c("Match_Date", "Home", "Away"), by.y  = c("Date", "Home", "Away"), all.x = TRUE)
days <- c(2,3,4)
methods <- c("s", "t", "w")
prob_overall <- matrix(rep(NA, 3*150), 150)
bugra_results <- data.table()
i <- 2
j <- "t"
b <- as.Date("2018-05-16")
a <- as.Date("2012-09-15")
## Add extra features to matches (winning average, score average, days before the match)
time <- system.time(matches <- match_processing(comp_data, i, j) )
# preprocess odd data
odd_details=details_data_preprocessing(odd_details_raw,matches,which_bets = c("1x2"))
# extract open and close odd type features from multiple bookmakers
features=extract_features.openclose(matches,odd_details,pMissThreshold=rem_miss_threshold,trainStart,testStart)
# divide data based on the provided dates
train_features=features[Match_Date>=a & Match_Date<b]
test_features=features[Match_Date>=b]
#keep complete cases
train_features <- train_features[complete.cases(train_features)]
test_features <- test_features[complete.cases(test_features)]
cbind(names(train_features), c(1:ncol(train_features)))
#Seperate Results and Data, remove matchID, MatchDate and LeagueID columns
trainclass <- train_features$Match_Result
traindata <- train_features[,-c(1,2,6)]
testclass <- test_features$Match_Result
testdata <- test_features[,-c(1,2,6)]
#Results as numeric values
trainclass <- (trainclass == "Home")*1 + (trainclass == "Away")*2
testclass <- (testclass == "Home")*1 + (testclass == "Away")*2
#Matrix of Results to be used as an input to the RPS function
results <- matrix(1:(length(testclass)*3), 3)
results[1,] <- (testclass == 1)*1
results[2,] <- (testclass == 0)*1
results[3,] <- (testclass == 2)*1
temp <- comp_data
temp <- temp[order(matchId)]
city_distances <- read.csv("city_distances.csv")
elo_data <- as.data.table(read.csv("elo_data.csv"))
elo_data
# Calculating Day Before Match
x <- temp[,c("matchId","Match_Date","Home","Away","Home_City",
"Away_City", "Home_Score", "Away_Score", "Half Time Home Team Goals",
"Half Time Away Team Goals","Result_Home","Result_Away", "Result_Tie",
"Home Team Shots","Away Team Shots" ,"Home Team Shots on Target","Away Team Shots on Target",
"Home Team Fouls Committed", "Away Team Fouls Committed", "Home Team Corners", "Away Team Corners",
"Home Team Yellow Cards",  "Away Team Yellow Cards",   "Home Team Red Cards", "Away Team Red Cards")]
x1 <- x[,c("matchId","Match_Date","Home", "Home Team Yellow Cards", "Home Team Red Cards" )]
x2 <- x[,c("matchId","Match_Date","Away", "Away Team Yellow Cards", "Away Team Red Cards")]
names <- c("matchId", "Match_Date", "Team", "Yellow_Card", "Red_Card" )
colnames(x1) <- names
colnames(x2) <- names
x3 <- rbind(x1,x2)
x3 <- x3[order(Team, Match_Date)]
x4 <- rbind(x3[1,c("Match_Date","Yellow_Card", "Red_Card")], x3[,c("Match_Date","Yellow_Card", "Red_Card")])
x4 <- x4[1:(nrow(x4)-1),]
x3$Day_Before_Match <- as.numeric(x3$Match_Date - x4$Match_Date)
x3$Last_Yellow <- x4$Yellow_Card
x3$Last_Red <- x4$Red_Card
elo_data$From <- as.Date(elo_data$From)
elo_data
elo_data$From <- ymd(elo_data$From)
city_distances <- read.csv("city_distances.csv")
elo_data <- as.data.table(read.csv("elo_data.csv"))
elo_data$From <- as.Date(elo_data$From)
elo_data
source('data_preprocessing.r')
source('feature_extraction.r')
source('performance_metrics.r')
source('train_models.r')
### match_processing is for adding average goals, average scores and days before the match
source('match_processing.r')
#save paths
matches_data_path = "Files/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds"
odd_details_data_path = "Files/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds"
#train and test dates
testStart=as.Date('2018-03-16')
trainStart=as.Date('2011-09-15')
rem_miss_threshold=0.01 #parameter for removing bookmaker odds with missing ratio greater than this threshold
# read data
city_distances <- read.csv("city_distances.csv")
s_2018 <- as.data.table(read.csv("Files/2018_data.csv"))
s_2017 <- as.data.table(read.csv("Files/2017_data.csv"))
s_2016 <- as.data.table(read.csv("Files/2016_data.csv"))
s_2015 <- as.data.table(read.csv("Files/2015_data.csv"))
s_2014 <- as.data.table(read.csv("Files/2014_data.csv"))
s_2013 <- as.data.table(read.csv("Files/2013_data.csv"))
s_2012 <- as.data.table(read.csv("Files/2012_data.csv"))
s_2011 <- as.data.table(read.csv("Files/2011_data.csv"))
s_2010 <- as.data.table(read.csv("Files/2010_data.csv"))
matches_raw=readRDS(matches_data_path)
odd_details_raw=readRDS(odd_details_data_path)
# preprocess matches
#matched datapreprocessing function is edited, it adds unixdate and weekday columns
matches=matches_data_preprocessing(matches_raw)
additional_data <- rbind(s_2010[,1:23],s_2011[,1:23],s_2012[,1:23],s_2013[,1:23],s_2014[,1:23]
,s_2015[,1:23],s_2016[,1:23],s_2017[,1:23],s_2018[,1:23])
additional_data$HomeTeam <- as.character(additional_data$HomeTeam)
additional_data$AwayTeam <- as.character(additional_data$AwayTeam)
additional_data$Date <- dmy(additional_data$Date)
additional_data <- additional_data[complete.cases(additional_data)]
names1 <- sort(unique(additional_data$HomeTeam))
names2 <- sort(unique(matches$Home))
names3 <- cbind(names1,names2)
for(i in 1:nrow(names3))
{
additional_data[HomeTeam == names3[i,1]]$HomeTeam <- names3[i,2]
additional_data[AwayTeam == names3[i,1]]$AwayTeam <- names3[i,2]
}
additional_data <- additional_data[,Div:=NULL]
col_names <- c("Date", "Home", "Away", "Full Time Home Team Goals",
"Full Time Away Team Goals", "Full Time Result" ,"Half Time Home Team Goals",
"Half Time Away Team Goals", "Half Time Result", "Referee", "Home Team Shots",
"Away Team Shots", "Home Team Shots on Target", "Away Team Shots on Target",
"Home Team Fouls Committed", "Away Team Fouls Committed", "Home Team Corners",
"Away Team Corners", "Home Team Yellow Cards", "Away Team Yellow Cards",
"Home Team Red Cards", "Away Team Red Cards")
colnames(additional_data) <- col_names
comp_data <- merge(matches, additional_data, by.x = c("Match_Date", "Home", "Away"), by.y  = c("Date", "Home", "Away"), all.x = TRUE)
days <- c(2,3,4)
methods <- c("s", "t", "w")
prob_overall <- matrix(rep(NA, 3*150), 150)
bugra_results <- data.table()
i <- 2
j <- "t"
b <- as.Date("2018-05-16")
a <- as.Date("2012-09-15")
cols <- c(6,8,9,11,23,25,37:39,97,112,127)
train_date <- as.Date(c('2011-09-15','2012-09-15','2013-09-15','2014-09-15'))
test_date <- as.Date(c('2018-03-16','2018-04-16','2018-05-16'))
## Add extra features to matches (winning average, score average, days before the match)
time <- system.time(matches <- match_processing(comp_data, i, j) )
# preprocess odd data
odd_details=details_data_preprocessing(odd_details_raw,matches,which_bets = c("1x2"))
# extract open and close odd type features from multiple bookmakers
features=extract_features.openclose(matches,odd_details,pMissThreshold=rem_miss_threshold,trainStart,testStart)
# divide data based on the provided dates
train_features=features[Match_Date>=a & Match_Date<b]
test_features=features[Match_Date>=b]
#keep complete cases
train_features <- train_features[complete.cases(train_features)]
test_features <- test_features[complete.cases(test_features)]
cbind(names(train_features), c(1:ncol(train_features)))
#Seperate Results and Data, remove matchID, MatchDate and LeagueID columns
trainclass <- train_features$Match_Result
traindata <- train_features[,-c(1,2,6)]
testclass <- test_features$Match_Result
testdata <- test_features[,-c(1,2,6)]
#Results as numeric values
trainclass <- (trainclass == "Home")*1 + (trainclass == "Away")*2
testclass <- (testclass == "Home")*1 + (testclass == "Away")*2
#Matrix of Results to be used as an input to the RPS function
results <- matrix(1:(length(testclass)*3), 3)
results[1,] <- (testclass == 1)*1
results[2,] <- (testclass == 0)*1
results[3,] <- (testclass == 2)*1
cols <- names(traindata)
cols <- c(6,8,9,11,23,25,37:39,97,112,127)
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
# divide data based on the provided dates
train_features=features[Match_Date>=a & Match_Date<b]
test_features=features[Match_Date>=b]
#keep complete cases
train_features <- train_features[complete.cases(train_features)]
#Seperate Results and Data, remove matchID, MatchDate and LeagueID columns
trainclass <- train_features$Match_Result
traindata <- train_features[,-c(1,2,6)]
testclass <- test_features$Match_Result
testdata <- test_features[,-c(1,2,6)]
#Results as numeric values
trainclass <- (trainclass == "Home")*1 + (trainclass == "Away")*2
testclass <- (testclass == "Home")*1 + (testclass == "Away")*2
#Matrix of Results to be used as an input to the RPS function
results <- matrix(1:(length(testclass)*3), 3)
results[1,] <- (testclass == 1)*1
results[2,] <- (testclass == 0)*1
results[3,] <- (testclass == 2)*1
cols <- names(traindata)
cols <- c(6,8,9,11,23,25,37:39,97,112,127)
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
sub <- cbind(prob_rearranged, test_features$matchId, test_features$Unix_Date,test_features$Match_Result)
sub <- as.data.table(sub)
sub <- sub[order(V5)]
sub[150:180,]
sub
sub[150:180,]
sub <- sub[150:180,]
sub
sub <- merge(sub,matches[,c("matchId","Home","Away","Match_Date")], by.x = "V4", by.y = "matchId")
sub <- sub[order(Match_Date)]
sub
source('data_preprocessing.r')
source('feature_extraction.r')
source('performance_metrics.r')
source('train_models.r')
### match_processing is for adding average goals, average scores and days before the match
source('match_processing.r')
#save paths
matches_data_path = "Files/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds"
odd_details_data_path = "Files/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds"
#train and test dates
testStart=as.Date('2018-03-16')
trainStart=as.Date('2011-09-15')
rem_miss_threshold=0.01 #parameter for removing bookmaker odds with missing ratio greater than this threshold
# read data
city_distances <- read.csv("city_distances.csv")
s_2018 <- as.data.table(read.csv("Files/2018_data.csv"))
s_2017 <- as.data.table(read.csv("Files/2017_data.csv"))
s_2016 <- as.data.table(read.csv("Files/2016_data.csv"))
s_2015 <- as.data.table(read.csv("Files/2015_data.csv"))
s_2014 <- as.data.table(read.csv("Files/2014_data.csv"))
s_2013 <- as.data.table(read.csv("Files/2013_data.csv"))
s_2012 <- as.data.table(read.csv("Files/2012_data.csv"))
s_2011 <- as.data.table(read.csv("Files/2011_data.csv"))
s_2010 <- as.data.table(read.csv("Files/2010_data.csv"))
matches_raw=readRDS(matches_data_path)
odd_details_raw=readRDS(odd_details_data_path)
# preprocess matches
#matched datapreprocessing function is edited, it adds unixdate and weekday columns
matches=matches_data_preprocessing(matches_raw)
additional_data <- rbind(s_2010[,1:23],s_2011[,1:23],s_2012[,1:23],s_2013[,1:23],s_2014[,1:23]
,s_2015[,1:23],s_2016[,1:23],s_2017[,1:23],s_2018[,1:23])
additional_data$HomeTeam <- as.character(additional_data$HomeTeam)
additional_data$AwayTeam <- as.character(additional_data$AwayTeam)
additional_data$Date <- dmy(additional_data$Date)
additional_data <- additional_data[complete.cases(additional_data)]
names1 <- sort(unique(additional_data$HomeTeam))
names2 <- sort(unique(matches$Home))
names3 <- cbind(names1,names2)
for(i in 1:nrow(names3))
{
additional_data[HomeTeam == names3[i,1]]$HomeTeam <- names3[i,2]
additional_data[AwayTeam == names3[i,1]]$AwayTeam <- names3[i,2]
}
additional_data <- additional_data[,Div:=NULL]
col_names <- c("Date", "Home", "Away", "Full Time Home Team Goals",
"Full Time Away Team Goals", "Full Time Result" ,"Half Time Home Team Goals",
"Half Time Away Team Goals", "Half Time Result", "Referee", "Home Team Shots",
"Away Team Shots", "Home Team Shots on Target", "Away Team Shots on Target",
"Home Team Fouls Committed", "Away Team Fouls Committed", "Home Team Corners",
"Away Team Corners", "Home Team Yellow Cards", "Away Team Yellow Cards",
"Home Team Red Cards", "Away Team Red Cards")
colnames(additional_data) <- col_names
comp_data <- merge(matches, additional_data, by.x = c("Match_Date", "Home", "Away"), by.y  = c("Date", "Home", "Away"), all.x = TRUE)
days <- c(2,3,4)
methods <- c("s", "t", "w")
prob_overall <- matrix(rep(NA, 3*150), 150)
bugra_results <- data.table()
i <- 2
j <- "t"
b <- as.Date("2018-05-16")
a <- as.Date("2012-09-15")
## Add extra features to matches (winning average, score average, days before the match)
time <- system.time(matches <- match_processing(comp_data, i, j) )
# preprocess odd data
odd_details=details_data_preprocessing(odd_details_raw,matches,which_bets = c("1x2"))
# extract open and close odd type features from multiple bookmakers
features=extract_features.openclose(matches,odd_details,pMissThreshold=rem_miss_threshold,trainStart,testStart)
# divide data based on the provided dates
train_features=features[Match_Date>=a & Match_Date<b]
test_features=features[Match_Date>=b]
#keep complete cases
train_features <- train_features[complete.cases(train_features)]
test_features <- test_features[complete.cases(test_features)]
cbind(names(train_features), c(1:ncol(train_features)))
#Seperate Results and Data, remove matchID, MatchDate and LeagueID columns
trainclass <- train_features$Match_Result
traindata <- train_features[,-c(1,2,6)]
testclass <- test_features$Match_Result
testdata <- test_features[,-c(1,2,6)]
#Results as numeric values
trainclass <- (trainclass == "Home")*1 + (trainclass == "Away")*2
testclass <- (testclass == "Home")*1 + (testclass == "Away")*2
#Matrix of Results to be used as an input to the RPS function
results <- matrix(1:(length(testclass)*3), 3)
results[1,] <- (testclass == 1)*1
results[2,] <- (testclass == 0)*1
results[3,] <- (testclass == 2)*1
cols <- names(traindata)
cols <- c(6,8,9,11,23,25,37:39,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
# divide data based on the provided dates
train_features=features[Match_Date>=a & Match_Date<b]
test_features=features[Match_Date>=b]
#keep complete cases
train_features <- train_features[complete.cases(train_features)]
#Seperate Results and Data, remove matchID, MatchDate and LeagueID columns
trainclass <- train_features$Match_Result
traindata <- train_features[,-c(1,2,6)]
testclass <- test_features$Match_Result
testdata <- test_features[,-c(1,2,6)]
#Results as numeric values
trainclass <- (trainclass == "Home")*1 + (trainclass == "Away")*2
testclass <- (testclass == "Home")*1 + (testclass == "Away")*2
#Matrix of Results to be used as an input to the RPS function
results <- matrix(1:(length(testclass)*3), 3)
results[1,] <- (testclass == 1)*1
results[2,] <- (testclass == 0)*1
results[3,] <- (testclass == 2)*1
cols <- names(traindata)
cols <- c(6,8,9,11,23,25,37:39,97,112,127)
cbind(cols, c(1:length(cols)))
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
sub <- cbind(prob_rearranged, test_features$matchId, test_features$Unix_Date,test_features$Match_Result)
sub <- as.data.table(sub)
sub <- sub[order(V5)]
sub[150:180,]
sub <- sub[150:180,]
sub <- merge(sub,matches[,c("matchId","Home","Away","Match_Date")], by.x = "V4", by.y = "matchId")
sub <- sub[order(Match_Date)]
sub
write.csv(sub, file = "C:/Users/Bugra/Documents/GitHub/match_mining/sub8.csv")
