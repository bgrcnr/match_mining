prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(cols, c(1:length(cols)))
cols <- c(9:16,23:30,37:39,52,67,82,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cols <- c(9:16,23:30,37:39,97,112,127)
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cols <- c(9:16,23:30,37:39,52,67,82)
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(cols, c(1:length(cols)))
cols <- c(5:16,23:30,37:39,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cols <- c(4:16,23:30,37:39,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(cols, c(1:length(cols)))
cols <- c(2:3,5:16,23:30,37:39,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cols <- c(5:16,23:30,37:39,97,112,127)
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(cols, c(1:length(cols)))
cols <- names(traindata)
cols <- c(5:11,14:16,23:25,28:30,37:39,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(cols, c(1:length(cols)))
cols <- c(5:10,14:16,23:24,28:30,37:39,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(cols, c(1:length(cols)))
cols <- c(9:11,14:16,23:25,28:30,37:39,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cols <- c(6,8,9:11,14:16,23:25,28:30,37:39,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(cols, c(1:length(cols)))
cols <- c(6,8,9,11,14,16,23,25,28,30,37:39,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(cols, c(1:length(cols)))
cols <- c(6,8,9,11,14,16,23,25,28,30,38:39,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(cols, c(1:length(cols)))
cols <- c(6,8,9,11,14,16,23,25,28,30,37:39,97,112,127)
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(cols, c(1:length(cols)))
cols <- c(6,8,9,11,14,23,25,28,37:39,97,112,127)
s determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(cols, c(1:length(cols)))
cols <- c(6,8,9,11,23,25,37:39,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(cols, c(1:length(cols)))
cols <- c(6,8,11,25,37:39,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cols <- c(6,8,9,11,23,25,37:39,97,112,127)
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
# divide data based on the provided dates
train_features=features[Match_Date>=a & Match_Date<b]
test_features=features[Match_Date>=b]
#keep complete cases
train_features <- train_features[complete.cases(train_features)]
trainclass <- train_features$Match_Result
traindata <- train_features[,-c(1,2,6)]
testclass <- test_features$Match_Result
testdata <- test_features[,-c(1,2,6)]
#Results as numeric values
trainclass <- (trainclass == "Home")*1 + (trainclass == "Away")*2
testclass <- (testclass == "Home")*1 + (testclass == "Away")*2
#Matrix of Results to be used as an input to the RPS function
results <- matrix(1:(length(testclass)*3), 3)
results[1,] <- (testclass == 1)*1
results[2,] <- (testclass == 0)*1
results[3,] <- (testclass == 2)*1
cols <- names(traindata)
cbind(cols, c(1:length(cols)))
cols <- c(6,8,9,11,23,25,37:39,97,112,127)
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
sub <- cbind(prob_rearranged, test_features$matchId, test_features$Unix_Date,test_features$Match_Result)
sub <- as.data.table(sub)
sub <- sub[order(V5)]
sub
sub[150:180,]
sub <- sub[158:166,]
sub
sub <- cbind(prob_rearranged, test_features$matchId, test_features$Unix_Date,test_features$Match_Result)
sub <- as.data.table(sub)
sub <- sub[order(V5)]
sub <- sub[158:176,]
sub
sub <- cbind(prob_rearranged, test_features$matchId, test_features$Unix_Date,test_features$Match_Result)
sub <- as.data.table(sub)
sub <- sub[order(V5)]
sub[158:180,]
sub <- sub[159:170,]
sub
sub <- cbind(prob_rearranged, test_features$matchId, test_features$Unix_Date,test_features$Match_Result)
sub <- as.data.table(sub)
sub <- sub[order(V5)]
sub <- sub[158:170,]
sub
sub <- cbind(prob_rearranged, test_features$matchId, test_features$Unix_Date,test_features$Match_Result)
sub <- as.data.table(sub)
sub <- sub[order(V5)]
sub <- sub[158:172,]
sub
sub <- merge(sub,matches[,c("matchId","Home","Away","Match_Date")], by.x = "V4", by.y = "matchId")
sub <- sub[order(Match_Date)]
sub
write.csv(sub, file = "C:/Users/Bugra/Documents/GitHub/match_mining/sub7.csv")
