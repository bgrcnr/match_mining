test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
pca <- princomp(train1)
pca
summary(pca)
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(sample(10,1:38))]
cols
cols <- cols[c(sample(10,38))]
cols <- cols[c(sample(10,1:38))]
cols
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(sample(10,1:38))]
cols
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(4:8,21,26:32))]
cols <- cols[c(4:8,21,26:32)]
cols
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(4:8,21,26:35)]
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(33:38)]
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
#Inputs
train4 <- traindata[,..cols]
test4 <- testdata[,..cols]
train4 <- as.data.table(scale(train4))
test4 <- as.data.table(scale(test4))
#Bagging Model requires results to be in input data
train4$Match_Result <- as.factor(trainclass)
test4$Match_Result <- as.factor(testclass)
#Model is generated
match.bagging <- bagging(Match_Result ~ ., data = train4, boos = TRUE, mfinal = 10, control = (minsplit = 0))
#Predictions are made
match.predbegging <- predict.bagging(match.bagging, newdata = test4)
#Probabilities for each class
boosting_probs <- t(match.predbegging$prob)
# Average RPS and RPS Matrix
prob_rearranged <- boosting_probs
prob_rearranged[1,] <- boosting_probs[2,]
prob_rearranged[2,] <- boosting_probs[1,]
rps4mat <- RPS_matrix(t(prob_rearranged),t(results))
rps4 <- mean(rps4mat)
rps4
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(1:23)]
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(4:23)]
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(4:23)]
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(5:23)]
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(21:31)]
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
cols <- names(traindata)
cbind(names(traindata), c(1:ncol(traindata)))
cols <- cols[c(21:31,33:38)]
#### Model 1 - Nearest Neighbor
# Inputs are generated from data files
train1 <- traindata[,..cols]
test1 <- testdata[,..cols]
#Inputs are scaled
train1 <- as.data.table(scale(train1))
test1 <- as.data.table(scale(test1))
#knn model is constructed. k is determined arbitrarily, no cross validation
pred11 <- knn(train1,test1, trainclass, k = 29, prob = TRUE)
#confusion matrix and accuracy
confusion_matrix_knn <- table(pred11,testclass)
accuracy_knn <- sum(pred11==testclass)/length(testclass)
# Bind train and test data to be used as an input in KODAMA's knn.dist function
x <- rbind(train1,test1)
#Distances are calculated
kdist <- KODAMA::knn.dist(x)
#Prediction is made
pred <- KODAMA::knn.predict(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29, agg.meth = "majority")
# display the confusion matrix and accuracy
confusion_matrix_knn_kodama <- table(pred,testclass)
accuracy_knn_kodama <- sum(pred==testclass)/length(testclass)
accuracy_knn_kodama
# view probabilities (all class probabilities are returned)
prob <- KODAMA::knn.probability(1:nrow(train1), (nrow(train1)+1):nrow(x), trainclass, kdist, k=29)
prob_rearranged <- prob
prob_rearranged[1,] <- prob[2,]
prob_rearranged[2,] <- prob[1,]
# RPS Results are calculated
rps1mat <- RPS_matrix(t(prob_rearranged),t(results))
rps1 <- mean(rps1mat)
rps1
#Output of RPS_Matrix function
########## End of Nearest Neighbor Analysis
##### Model 2: Multinomial Regression
#Model inputs determined
train2 <- traindata[,..cols]
test2 <- testdata[,..cols]
train2 <- as.data.table(scale(train2))
test2 <- as.data.table(scale(test2))
#Multinomial model requires results to be in the data
train2$Match_Result <- trainclass
test2$Match_Result <- testclass
#Model is generated
multinomModel <- multinom(Match_Result ~ ., data=train2)
summary (multinomModel)
#Probabilities for each class and the results are generated
predicted_scores <- predict (multinomModel, test2, "probs") # predict on new data
predicted_class <- predict (multinomModel, test2)
#Confusion matrix and accuracy
confusion_matrix_multinom <- table(predicted_class, testclass)
accuracy_multinom <- sum(predicted_class == testclass)/length(testclass)
accuracy_multinom
prob_rearranged <- predicted_scores
prob_rearranged[,1] <- predicted_scores[,2]
prob_rearranged[,2] <- predicted_scores[,1]
##  average RPS and RPS Matrix
rps2mat <- RPS_matrix(prob_rearranged, t(results))
rps2 <- mean(rps2mat)
rps2
